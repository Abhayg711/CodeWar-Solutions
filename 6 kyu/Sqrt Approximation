We want to approximate the sqrt function. Usually this function takes a floating point number and returns another floating point number, but in this kata we're going to work with integral numbers instead.

Your task is to write a function that takes an integer n and returns either

an integer k if n is a square number, such that k * k == n or
a range (k, k+1), such that k * k < n and n < (k+1) * (k+1).
Examples
sqrt_approximation(4) --> 2
sqrt_approximation(5) --> [2,3]
Note : pow() and sqrt() functions are disabled.

Remarks
In dynamic languages, return either a single value or an array/list. In Haskell, use Either.



def sqrt_approximation(number):
    
    for i in range(1, round(number/2) + 1):
        if i*i == number:
            return i
        elif (i*i < number) and ((i+1)*(i+1) > number):
            return [i, i+1]
